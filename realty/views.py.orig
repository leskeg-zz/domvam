# -*- coding: utf-8 -*-
from django.shortcuts import render, render_to_response, redirect
# from django.http import HttpResponseRedirect
from django.conf import settings
from django.views.decorators.http import require_http_methods
from django.http import HttpResponse, QueryDict, HttpResponseNotModified
from django_ajax.decorators import ajax
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from helpers import do_filtering, create_user_profile, price_convert, handle_add_images, query_lte_gte, query_lte_gte_, query_inside,remove_images, get_my_favorites, get_my_cards
from django.views.decorators.csrf import csrf_exempt
# from myregions import my_regions
import json
from pprint import pprint
import os, os.path

from models import ProfileAgency, Region, Advert, Advert_Users, Currency, HEATING_CHOICES, ELECTRICITY_CHOICES, SEWERAGE_CHOICES, Profile, Ticket, Myregions
from forms import AgencyForm, Filter, AddCard, RegisterForm, AddCardRentFlat, AddCardRentRoom, AddCardRentHouse,AddCardRentArea, AddCardSaleFlat,AddCardSaleHouse, AddCardSaleArea, TicketForm, AddCardCommercial
from datetime import datetime, timedelta

from django.contrib.auth.models import User
from django.core.urlresolvers import reverse
from django.http.response import HttpResponseRedirect
from django.template.context import RequestContext
from franchising.settings import REGION_TR, MEDIA_ROOT, CAT_TABS_COMMERCIAL, CAT_TYPE_COMMERCIAL, MY_REGIONS

# Create your views here.
from mongoengine.django.auth import User
from django.contrib.auth import login, logout, authenticate
from django.contrib import messages

from django.utils.datastructures import MultiValueDict
import re
from django.http import Http404
from random import randint
import shutil
import pprint
from itertools import chain
from operator import attrgetter
# from validate_email import validate_email


def test(request):
    add_form = AddCard()
    return render(request, 'test.html',{
        'form': add_form
    })

def ticket(request):
    if request.method == 'POST':
        request = request.POST.copy()
        ticket = TicketForm(request)
        if ticket.is_valid():
            Ticket(**ticket.cleaned_data).save()
            return redirect('/')
    else:
        ticket = TicketForm()
    return render(request,'ticket.html',{'ticket':ticket})

def my_cards(request):
    if request.user.is_authenticated():
        try:
            user =  Profile.objects.get(username=request.user.username)
        except:
            try:
                user =  ProfileAgency.objects.get(username=request.user.username)
            except:
                user = create_user_profile(request.user)

        my_ads = get_my_cards(user)
    else:
        my_ads = None

    return render(request, "my_cards.html", 
        {
            'ads': my_ads,
        }
    )

def favorite_cards(request):
    if request.user.is_authenticated():
        try:
            user =  Profile.objects.get(username=request.user.username)
        except:
            try:
                user =  ProfileAgency.objects.get(username=request.user.username)
            except:
                user = create_user_profile(request.user)

        my_ads = get_my_favorites(user)
    else:
        my_ads = None

    filter_obj = Filter({"group":"living", "cat_tab":"flat"})
    try:
        favorites = user.favorites
    except:
        favorites = []
    return render(request, "favorite_cards.html", 
        {
            'ads': my_ads,
            'filter_obj': filter_obj,
            "myfav": favorites,
            "mode": "favorites", 
        }
    )

@csrf_exempt
def action_card(request):
    if request.method == 'POST':
        if '_delete' in request.POST:
            try:
                ad = Advert_Users.objects(id=request.POST["_delete"]).get()
            except:
                ad = Advert.objects(id=request.POST["_delete"]).get()

            try:
                shutil.rmtree(os.path.join(settings.MEDIA_ROOT, request.POST["_delete"]))
            except:
                pprint.pprint(request.POST["_delete"] +'images forlder does not exist')

            try:
                Advert_Users.objects(id=request.POST["_delete"]).delete()
            except:
                Advert.objects(id=request.POST["_delete"]).delete()

        elif '_extend' in request.POST:
            try:
                ad = Advert.objects(id=request.POST["_extend"]).get()
            except:
                ad = Advert_Users.objects(id=request.POST["_extend"]).get()

            ad.adding_date = datetime.now()
            ad.expiring_date = ad.adding_date + timedelta(days=30)
            ad.save()

        elif '_edit' in request.POST:
            try:
                ad = Advert_Users.objects(id=request.POST["_edit"]).get()
            except:
                ad = Advert.objects(id=request.POST["_edit"]).get()

            mydict = json.loads(ad.to_json())

            options=[
                u'action_type',
                u'group',
                u'cat_tab',
                u'cat_type',
                u'region',
                u'region2',
                u'currency',
                u'number_of_rooms',
                u'balcony_deck',
                u'wall_material',
                u'wc',
                u'flooring',
                u'repair',
                u'type_of_house',
                u'period'
            ]

            for option in options:
                try:
                    mydict[ option + '_0'] = mydict.pop(option)
                except:
                    pass

            try:
                mydict[u'region__0'] = mydict[u'region2_0']
                mydict[u'region2'] = mydict[u'region2_0']
            except:
                pass

            if mydict['group_0'] == 'commercial':
                del mydict['cat_tab_0']

            # mydict[u'agreement'] = False
            qdict = QueryDict('')
            qdict = qdict.copy()
            qdict.update(mydict)
            add_form = AddCard(mydict)
            
            return render(request, "add_card.html", 
                {
                    "ad": ad,
                    "form": add_form,
                    "editform": True,
                }
            )

        return redirect('/my-cards')

def user_profile(request):
    if request.user.is_authenticated():
        username = request.user.username
        user_reviews = Advert.objects(reviews__username=username)
        try :
            user_profile = Profile.objects.get(username=username)
        except:
            try:
                user_profile =  ProfileAgency.objects.get(username=request.user.username)
            except:
                user_profile = create_user_profile(request.user)

        my_reviews = {}
        for ad in user_reviews:
            my_reviews[ad] = []
            for review in ad.reviews:
                if review['username'] == username:
                    my_reviews[ad].append(review)

        filter_obj = Filter({"group":"living", "cat_tab":"flat"})       

        return render(request, "user_profile.html", 
            {
            'filter_obj': filter_obj, 
            'my_reviews': my_reviews,
            'user': user_profile,
            }
        )
    else:
        return redirect('/')

def feedback(request, obj_id, review_id):
    # TODO: reimplemetn with django forms!
    if request.method == 'POST' and request.POST['feedback']:
        ad = Advert.objects(id=obj_id).get()
        feedback = {
            "username": request.POST['username'], # Do not use ever dirty values from POST!
            "date": datetime.now(),
            "text": request.POST['feedback'], # same danger
        }

        try:
            feedback_bck = ad["reviews"][int(review_id)]["feedback"]
        except:
            feedback_bck = []

        feedback_bck.append(feedback)
        ad["reviews"][int(review_id)]["feedback"] = feedback_bck
        ad.save()    
    else:
        pass

    return HttpResponseRedirect('/card/' + obj_id )
    # return redirect('/')

def add_review(request, obj_id):
    if request.method == 'POST' and request.POST['review']: # same warnign. you definitely not should do like this
        ad = Advert.objects(id=obj_id).get()

        try:
            review_id = ad.number_of_reviews
        except:
            ad.number_of_reviews = 0
            ad.save()
            review_id = 0

        review = {
            "username": request.POST['username'],
            "date": datetime.now(),
            "text": request.POST['review'],
            "review_id": review_id
        }
        ad.update(push__reviews=review)
        ad.update(inc__number_of_reviews=1)

        # ad.objects.get_or_create(review=review)

    else:
        pass

    return HttpResponseRedirect('/card/' + obj_id )
    # return redirect('/')


# from django.core.mail import send_mail
@csrf_exempt
@require_http_methods(['POST'])
@ajax
def register(request):
    Registerform = RegisterForm(request.POST)
    Registerform.is_valid()

    username = Registerform.cleaned_data["username"]
    password = Registerform.cleaned_data["password"]
    email = Registerform.cleaned_data["email"]

    errorExists = False

    if User.objects.filter(username=username).count() > 0:
        errorExists = True
        answer = 'Пользователь уже существует'
    
    if User.objects.filter(email=email).count() > 0:
        errorExists = True
        answer = 'E-mail уже существует'

    if not errorExists:

        User.create_user(username,password,email)
        user = User.objects.get(username=username)

        Profile(**Registerform.cleaned_data).save()
        user = authenticate(username=username, password=password)
        os.system('echo "Click in following link to activate your account: http://domvam.by/enable_user/?id=' + str(user.id) + '"| mail -s "Domvam e-mail verification" ' + email)
        user.is_active = False
        user.save()

        return 'Мы посылаем письмо к вам, пожалуйста, проверьте свою электронную почту, чтобы активировать аккаунт'

    else:
        return answer

@csrf_exempt
@require_http_methods(['POST'])
@ajax
def registerAgency(request):
    Registerform = RegisterForm(request.POST)
    Registerform.is_valid()

    username = Registerform.cleaned_data["username"]
    password = Registerform.cleaned_data["password"]
    email = Registerform.cleaned_data["email"]

    errorExists = False

    if User.objects.filter(username=username).count() > 0:
        errorExists = True
        answer = 'Пользователь уже существует'
    
    if User.objects.filter(email=email).count() > 0:
        errorExists = True
        answer = 'E-mail уже существует'

    if not errorExists:

        User.create_user(username,password,email)
        user = User.objects.get(username=username)
        Agencyform = AgencyForm(request.POST)
        Agencyform.is_valid()
        ProfileAgency(**Agencyform.cleaned_data).save()
        os.system('echo "Click in following link to validate your email: http://domvam.by/validate_email_agency/?id=' + str(user.id) + '"| mail -s "Domvam e-mail verification" ' + email)
        user.is_active = False
        user.save()

        return 'We send an email to you, please check your email to activate your account'

    else:
        return answer

def login_view(request):
    if request.method == 'POST':
        Registerform = RegisterForm(request.POST)
        Registerform.is_valid()
        username = Registerform.cleaned_data['username']
        try:
            user = User.objects.get(username=username)
        except:
            try:
                user = User.objects.get(email=username)
            except:
                user = None
        
        # user = authenticate(username=username, password=password)
        if user is not None:
            password = Registerform.cleaned_data['password']
            if user.check_password(password) and user.is_active: # Redirect to a success page.
                user.backend = 'mongoengine.django.auth.MongoEngineBackend'
                login(request, user)
                # request.session.set_expiry(60 * 60 * 1) # 1 hour timeout                 
                return redirect('/')
                # return HttpResponse('logged')
            else: # Return an 'invalid login' error message.
                pass
                # return HttpResponse('disabled account')
                # Return a 'disabled account' error message
        else: 
            messages.add_message(request, messages.INFO, "Неправильное имя пользователя или пароль")
            # return HttpResponse('invalid login')
            # messages.add_message(request,messages.ERROR,u"Incorrect login name or password !")
            # return render(request, 'login.html', {})
    else:
        Registerform = RegisterForm()

    return render(request, "login.html", 
        {
        'RegisterForm': Registerform,
        }
    )
 
def admin_login(request):
    if request.method == 'POST':
        Registerform = RegisterForm(request.POST)
        Registerform.is_valid()
        username = Registerform.cleaned_data['username']
        try:
            user = User.objects.get(username=username)
        except:
            try:
                user = User.objects.get(email=username)
            except:
                user = None
        
        # user = authenticate(username=username, password=password)
        if user is not None:
            password = Registerform.cleaned_data['password']
            if user.check_password(password) and user.is_active: # Redirect to a success page.
                user.backend = 'mongoengine.django.auth.MongoEngineBackend'
                login(request, user)
                # request.session.set_expiry(60 * 60 * 1) # 1 hour timeout
                if user.is_superuser and user.is_staff and user.is_active:
                    return redirect('/adminpage')
                else:
                    return redirect('/')
                # return HttpResponse('logged')
            else: # Return an 'invalid login' error message.
                pass
                # return HttpResponse('disabled account')
                # Return a 'disabled account' error message
        else: 
            messages.add_message(request, messages.INFO, "Неправильное имя пользователя или пароль")
            # return HttpResponse('invalid login')
            # messages.add_message(request,messages.ERROR,u"Incorrect login name or password !")
            # return render(request, 'login.html', {})
    else:
        Registerform = RegisterForm()

    return render(request, "admin_login.html", 
        {
        'RegisterForm': Registerform,
        }
    )

    # data = {
    #     'RegisterForm': Registerform,
    # }
    # return render_to_response('login.html', data, context_instance=RequestContext(request))

def logout_view(request):
    logout(request)
    return redirect('/')
    # return HttpResponse('bye')

def _static(request):
    pass

def home(request, **kwargs):
    # request.GET - original, from browser GET 
    # get_params - GET with default values
    get_params = request.GET.copy()
    get_params_len = len(get_params)
    # import pprint
    # pprint.pprint(get_params)

    # if "form-side" in get_params.keys():
    #     mydict.keys()[mydict.values().index(16)]
    #     get_params['cat_tab'] = settings.REALT_CAT_TR[ get_params['cat_tab'] ]
    #     get_params['action_type']  = settings.REALT_ACTION_DICT[ get_params['action_type'] ]

    if not "group" in get_params.keys():
        get_params['group'] = "living"

    if "group" in get_params.keys() and not "cat_tab" in get_params.keys():
        if get_params['group'] == "living":
            get_params['cat_tab'] = "flat"
        elif get_params['group'] == "commercial":
            get_params['cat_tab'] = "building"


    get_params.update({
        # "sort_order": "-adding_date",
        "sort_order": "-adding_date",
        "currency": "usd",
        "view_type": "big", # big\small\map
        "convert_currency_to": "usd",
        "action_type": "sale",
    })
    get_params.update(request.GET.copy()) # f**ing django forms!!!


    filter_obj = Filter(get_params)
    filter_obj.is_valid() # call here to use cleaned_data

    # regions = Region.objects.dict_all()

    # default params:
    # query_params = {}
    query_params = {
        "price__exists":            True, 
    #     "number_of_rooms__exists":  True,
    #     "total_area__exists":       True,
    #     "living_area__exists":      True,
    #     "kitchen_area__exists":     True,
    #     "floor__exists":            True,
    #     "number_or_floors__exists": True,
        'images_len__gt':               1,
    }

    if filter_obj.is_valid():
        flag = False
        for k,v in filter_obj.cleaned_data.iteritems():
            if not v == "":
                flag = True
                break
        # TODO: we need to refactor filtering
        # There are no any filtering at mainpage
        if flag:
            # flag == True, shows, that Data exists

            # do not show "best" adverts if use start filtering
            if get_params_len > 0:
                query_params = {}

            if not filter_obj.cleaned_data['region'] == "":
                region_slug = Region.objects.filter(slug=filter_obj.cleaned_data['region']).get404()
                query_params['region'] = region_slug.name

            # simple queries 
            for key in ['group', 'cat_type', 'number_of_rooms', 'action_type']:
                if not filter_obj.cleaned_data[key] == "":
                    #more complicated queries
                    if key == 'number_of_rooms':
                        query_params[key+"__gte"] = str(filter_obj.cleaned_data[key])

            # assume that cat_tab exists each call
            if 'cat_type' not in get_params.keys() or get_params['cat_type'].strip() == '':
                if 'cat_type' in query_params.keys():
                    del query_params['cat_type']

                query_params['cat_type__in'] = zip(*filter_obj.fields['cat_type'].choices)[0]

            
            for mystring in ['price', 'living_area', 'kitchen_area', 'total_area', 'floors']:
                query_lte_gte(filter_obj,mystring,query_params)

            for mystring in ['heating', 'sewerage', 'electricity']:
                query_inside(filter_obj, mystring, query_params)

            if filter_obj.cleaned_data['garage'] == 'yes':
                query_params['garage__exists'] = True

            if filter_obj.cleaned_data['water'] == 'yes':
                query_params['water__exists'] = True

            if filter_obj.cleaned_data['with_photo'] == True:
                query_params['images_len__gt'] = 0

            query_params[ 'action_type__in' ] = re.sub("[^\w]", " ",  filter_obj.cleaned_data['action_type']).split()
            # query_params[ 'adding_date__gte' ] = datetime.now() - timedelta(days=30)
        else:
            # No Data exists
            pass

    if 'filter_words' in kwargs:
        url_filtering = kwargs['filter_words'].split('-')

        for index, word in enumerate(url_filtering):
            if word == 'living' or word == 'commercial':
                query_params['group'] = word
                continue

            if word == 'liv_misc':
                query_params['group'] = 'living'
                # del query_params['cat_type']
                continue

            if word == 'flat' or word == 'house' or word == 'area':
                query_params['group'] = 'living'
                if word == 'flat':
                    query_params['cat_type__in'] = [word]
                else:
                    query_params['cat_tab'] = word
                
                continue

            if word == 'building' or word == 'premise' or word == 'land' or word == 'business':
                query_params['group'] = 'commercial'
                query_params['cat_tab'] = word
                continue

            if word == 'sale' or word == 'rent':
                query_params['action_type__contains'] = word
                # query_params["__raw__"] = {'action_type': {'$regex': word}}
                continue
            elif word == 'exchange':
                query_params['action_type'] = 'sale'
                query_params['exchange'] = True
                continue

            if word == 'in':
                query_params['region'] = REGION_TR[url_filtering[index+1]]
                continue

    if 'group' in query_params and 'cat_tab' in query_params and query_params['group'] == 'commercial':
        change_tab_cat_type = query_params['cat_tab']
    else:
        change_tab_cat_type = None

    limit = datetime.now() - timedelta(days=30)
    # query_params["__raw__"] = {'adding_date': {'$gt': limit} }
    query_params["__raw__"] = { '$or': [ {'adding_date': {'$gt': limit} }, {'expiring_date': {'$gt': datetime.now()} } ] }

    merge_ads_list = do_filtering(query_params, get_params['sort_order'])

    ads_count = merge_ads_list.count()

    paginator = Paginator(merge_ads_list, 12)
    page = request.GET.get('page')
    try:
        ads = paginator.page(page)
    except PageNotAnInteger:
        ads = paginator.page(1)
    except EmptyPage:
        ads = paginator.page(paginator.num_pages)

    # ads = list(ads[:25])
    # ads = Advert._get_db().command('text', 'advert', search=u"комната")
    # ads = ads['results']
    # ads = [x['obj'] for x in ads]
    # ads = []
    
    # ads_count = len(ads)


    # print filter_obj.cat_type


    # objects = Currency.objects.all()
    # out = {}
    # for obj in objects:
    #     out[obj['charcode'].lower()] = obj
    # out['byr'] = {'rate': 1, "scale": 1}

    _to_curr = 'byr'
    for ad in ads:
        ad.price = price_convert(float(ad.price), ad.currency, _to_curr)
        ad.currency = _to_curr

    if "icon_view" in get_params.keys():
        if get_params[ "icon_view" ] == "list-view":
            viewTemplate = "list"
        elif get_params[ "icon_view" ] == "grill-view":
            viewTemplate = "blocks"
    else:
        get_params['icon_view'] = "list-view"
        viewTemplate = "list"

    tab = "filter_" + get_params['cat_tab'] + ".html"

    query_params['current_status'] = 'vip-normal'
    try:
        user =  Profile.objects.get(username=request.user.username)
        myfav = user.favorites
        # myfav = [x.encode('ascii') for x in myfav]
    except:
        myfav = False

    try:
        ads_vip_normal = Advert.objects(**query_params)
        ads_vip_normal = ads_vip_normal[randint(1,len(ads_vip_normal))-1]
    except:
        ads_vip_normal = None

    query_params['current_status'] = 'vip-super'
    try:
        ads_vip_super = Advert.objects(**query_params)
        ads_vip_super = ads_vip_super[randint(1,len(ads_vip_super))-1]
    except:
        ads_vip_super = None
        
    cat_tabs_commercial = tuple(settings.CAT_TABS_COMMERCIAL)

    # countAdsRegion = {}
    # # query_params = {}
    # for region in settings.MY_REGIONS:
    #     query_params['region'] = region
    #     ads_regions = Advert.objects(**query_params)
    #     countAdsRegion[region] = ads_regions.count(False)
    #     ads_regions = Advert_Users.objects(**query_params)
    #     countAdsRegion[region] = countAdsRegion[region] + ads_regions.count(False)

    Agencyform = AgencyForm()

    return render(request, "main_page.html", 
        {
            # "regions": regions, 
            "filter_obj": filter_obj,
            "ads":ads, 
            "ads_count": ads_count,
            "get_params": get_params,
            "viewTemplate": viewTemplate,
            "tab": tab,
            "myfav": myfav,
            "ads_vip_super": ads_vip_normal,
            "ads_vip_normal": ads_vip_super,
            "cat_tabs_commercial": cat_tabs_commercial,
            # "countAdsRegion": countAdsRegion,
            'change_tab_cat_type': change_tab_cat_type,
            'Agencyform': Agencyform,
        }
    )

def card(request, obj_id):
    try:
        ad = Advert.objects(id=obj_id).get()
    except:
        try:
            ad = Advert_Users.objects(id=obj_id).get()
        except:
            return render(request, "404.html")

    try:
        ad.update(inc__number_of_views=1)
    except:
        ad.update(push__number_of_views=1)

    query_params = {'images_len__gt': 1, 'cat_type': ad.cat_type }
    my_random = randint(0,1000)
    random_ads = Advert.objects(**query_params).order_by('-number_of_views')[my_random:my_random+3]


    try:
        ad.action_type = settings.REALT_ACTION_DICT[ ad.action_type ]
    except:
        ad.action_type = settings.REALT_CAT_TR[ ad.group.encode() ]

    # information fields intersection 
    intersect = list(set(dir(ad)).intersection(settings.KEYS))
    info_fields = {}
    for field in intersect:
        if ad[field] is not None: 
            info_fields[field] = settings.DICT1[field]

    ad.other_prices = {}

    if "price" in ad.__dict__.keys():
        for cur in ["usd", "byr", "eur"]:
            if cur == ad.currency:
                continue

            # ad.other_prices[cur] = price_convert(ad.price, ad.currency, cur)

    appliance_layout = {}

    for key in list(set(["city_phone", "furniture", "home_appliances", "internet"]).intersection(ad.__dict__.keys())):
        if key in info_fields.keys():
            appliance_layout[key] = info_fields[key]
            del info_fields[key]

    get_params = {}
    get_params['group'] = "living"
    get_params['cat_tab'] = "flat"
    filter_obj = Filter(get_params)
    filter_obj.is_valid()

    try:
        if request.user.username == ad.username:
            myadd = True
        else:
            myadd = False
    except:
            myadd = False

    try:
        user =  Profile.objects.get(username=request.user.username)
        if user.favorites.count(obj_id) == 1:
            myfav = True
        else:
            myfav = False
    except:
        myfav = False

    return render(request, "main_page.html", 
        {
            "ad": ad,
            "filter_obj": filter_obj,
            "info_fields": info_fields,
            "appliance_layout": appliance_layout,
            "myadd": myadd,
            "myfav": myfav,
            "mode": "one_card",
            "random_ads": random_ads,
        }
    )

def add_card(request):
    sent = False
    if request.method == "POST":
        request = request.POST.copy()
        user_error = False

        if '_addCard' in request:
            sent = True

        if not request['username']:

            if request['usernameR']: # Register new user
                request['username'] = request['usernameR']
                request['email'] = request['emailR']
                request['password'] = request['passwordR']
                action = "Register"

            elif request['usernameL']: # Login user
                request['username'] = request['usernameL']
                request['email'] = request['emailL']
                request['password'] = request['passwordL']
                action = "Login"
            else:
                user_error = "You must login or register"

        Registerform = RegisterForm(request)
        if Registerform.is_valid():
            username = Registerform.cleaned_data["username"]
            password = Registerform.cleaned_data["password"]
            email = Registerform.cleaned_data["email"] 

            if action == "Register":
                try:
                    User.create_user(username,password,email)
                    user = authenticate(username=username, password=password)
                    login(request, user)
                    # if validate_email(email,verify=True):
                    #     User.create_user(username,password,email)
                    #     user = authenticate(username=username, password=password)
                    #     login(request, user)
                    # else:
                    #     user_error = "E-mail не существует"
                except:
                    user_error = "User already exists"

            elif action == "Login":
                try:
                    user = authenticate(username=username, password=password)
                except:
                    user = authenticate(username=email, password=password)

                try:
                    login(request, user)
                except:
                    user_error = "Incorrect login"
        else:
            user_error = "Incorrect user"

        add_form = AddCard(request, request.FILES)
        if add_form.is_valid():
        # if True:
            add_form.is_valid()

            if "sale" not in add_form.cleaned_data["action_type"]:
                add_form.cleaned_data["exchange"] = False

            if "rent" in add_form.cleaned_data["action_type"]:
                if "day" in request.POST.keys() and "month" in request.POST.keys():
                    add_form.cleaned_data["period"] = "day month"
                    del add_form.cleaned_data["day"]
                    del add_form.cleaned_data["month"]
                elif "month" in request.POST.keys():
                    add_form.cleaned_data["period"] = "month"
                    del add_form.cleaned_data["month"]
                elif "day" in request.POST.keys():
                    add_form.cleaned_data["period"] = "day"
                    del add_form.cleaned_data["day"]

            # action_type = re.sub("[^\w]", " ",  add_form.cleaned_data['action_type']).split() # Convert string in list
            # add_form.cleaned_data['action_type'] = action_type
            if "number_of_rooms" in request.POST.keys():
                add_form.cleaned_data["number_of_rooms"] = int(request.POST["number_of_rooms"])

            try:
                del add_form.cleaned_data['agreement']
                add_form.cleaned_data['title'] = REALT_ACTION_DICT[add_form.cleaned_data['action_type']]+' - '+REALT_CAT_TR[add_form.cleaned_data['cat_type']]+' - '+add_form.cleaned_data['number_of_rooms']+' - '+add_form.cleaned_data['region']+' - '+add_form.cleaned_data['street']

            except:
                try:
                    add_form.cleaned_data['title'] = add_form.cleaned_data['address']
                except:
                    pass

            if '_edit' in request.POST:
                obj_id = request.POST["ObjectId"]
                ad = Advert_Users.objects(id=obj_id).get()
                for key in add_form.cleaned_data:
                    if add_form.cleaned_data[key] == False:
                        myquery = "ad.update(unset__" + key + "=1)"
                    else:
                        myquery = "ad.update(set__" + key + "=" + "add_form.cleaned_data['" + key + "'])"
                    exec(myquery)

                return redirect('/card' + obj_id)

            else:

                for feature in ['furniture','home_appliances','internet']:
                    if not add_form.cleaned_data[feature]:
                        del add_form.cleaned_data[feature]

                for key in add_form.cleaned_data:
                    if add_form.cleaned_data[key] == False:
                        del add_form.cleaned_data[key]

                Advert(**add_form.cleaned_data).save()

                # doc_id = Advert()['doc_id']-1 # what is a purpose of using doc_id?
                ad = Advert.objects(**add_form.cleaned_data).get()
                
                original = []
                for f in request.FILES.getlist('FAKE_PATH'):
                    original.append( '/' + handle_add_images(f, ad.id) )

                images = {}
                images['original'] = original
                ad.images = images
                ad.images_len = len(request.FILES.getlist('FAKE_PATH'))
                ad.username = request['username']

                ad.expiring_date = ad.adding_date + timedelta(days=30)

                ad.save()
                return HttpResponseRedirect('/card' + str(ad.id) )
                # return redirect('/my-cards')

    else:
        # mvd = MultiValueDict({u'FAKE_PATH': request.FILES.getlist('FAKE_PATH') })
        mydict = {u'group_0': "living" , u'cat_tab_0': u"flat", u'cat_type_0': u"flat", u"currency_0": u"usd"}
        qdict = QueryDict('')
        qdict = qdict.copy()
        qdict.update(mydict)
        add_form = AddCard(mydict)
        Registerform = RegisterForm()
        user_error = False

        try:
            user_profile = Profile.objects(username=request.user.username)[0]
            is_agency = False
        except:
            try:
                user_profile = ProfileAgency.objects(username=request.user.username)[0]
                is_agency = True
            except:
                user_profile = None
                is_agency = False

    Agencyform = AgencyForm()                

    return render(request, "add_card.html", 
        {
            "form": add_form,
            "RegisterForm": Registerform,
            "user_error": user_error,
            "sent": sent,
            'user_profile': user_profile,
            'is_agency': is_agency,
            'Agencyform': Agencyform,
        }
    )
    # add_form.changed_data
    # add_form.full_clean()
    # pprint.pprint(add_form.errors)
    # pprint.pprint(add_form['captcha'].errors)
    # if add_form.is_valid():
    # pprint.pprint(add_form.errors)

# Ajax section
@require_http_methods(["POST"])
@csrf_exempt
@ajax
def ajax_get_cat_tabs(request):
    form = AddCard(request.POST)
    form.full_clean()
    form.is_valid()
    # if form.is_valid() and form.has_changed() and "group" in form.changed_data:
    if form.has_changed() and "group" in form.changed_data:
        res = Advert.get_cat_tab_choices(form.cleaned_data['group'])
    else:
        res = []

    return res


#TODO: rewrite in more convient and flexible way!
@require_http_methods(["POST"])
@csrf_exempt
@ajax
def ajax_get_cat_types(request):
    form = AddCard(request.POST)
    form.is_valid()
    # if form.is_valid() and form.has_changed() and ("group" in form.changed_data and "cat_tab" in form.changed_data):

    if form.has_changed() and ("group" in form.changed_data and "cat_tab" in form.changed_data):
        res = Advert.get_cat_type_choices(
                    form.cleaned_data['group'], form.cleaned_data['cat_tab']
                )
    else:
        res = []

    return res

def my_filtering(get_params):
    if not 'group' in get_params.keys():
        get_params['group'] = "living"

    if 'group' in get_params.keys() and not 'cat_tab' in get_params.keys():
        if get_params['group'] == "living":
            get_params['cat_tab'] = "flat"
        elif get_params['group'] == "commercial":
            get_params['cat_tab'] = "building"
    
    query_params = {
        'price__exists': True,
    }

    query_params['group'] = get_params["group"]

    if get_params['group'] == "living":
        # @TODO: REwrite with django form Filter!!!!! 

        if get_params["cat_tab"] == "flat":
            if "cat_type" in get_params:
                query_params['cat_type__in'] = [get_params["cat_type"]]           

        elif get_params["cat_tab"] == "liv_misc":
            if 'cat_type' in get_params:
                query_params['cat_type'] = get_params["cat_type"]
            else:
                query_params['cat_type__in'] = ['garage', 'parking_lot', 'other_liv_misc']
        else:
            query_params['cat_type'] = get_params["cat_tab"]

        # if get_params['cat_tab'] != "liv_misc" and 'cat_type' in get_params:
        #     del get_params['cat_type']


        if 'number_of_rooms' in get_params and get_params["number_of_rooms"] != "":
            mylist = [int(x) for x in get_params["number_of_rooms"].replace(","," ").split()]
            if 5 in mylist:
                mylist.extend(range(6,10))
            query_params['number_of_rooms__in'] = mylist

    elif get_params["group"] == "commercial":
        query_params['cat_tab'] = get_params['cat_tab']
        if 'cat_type' in get_params:
            query_params['cat_type'] = get_params['cat_type']

    # query_params['action_type'] = get_params['action_type']
    if 'action_type' in get_params:
        query_params['action_type__contains'] = get_params["action_type"]
        # query_params["__raw__"] = {
        #     "action_type": 
        #         {
        #             '$regex': get_params["action_type"] 
        #         }
        #     }

    if 'region' in get_params:
        query_params['region'] = get_params['region']

    if 'region2' in get_params:
        query_params['region2__contains'] = get_params["region2"]

    # if 'period' in get_params:
    #     query_params['period__in'] = [get_params['period']]
    if 'period' in get_params:
        query_params['period__contains'] = get_params["period"]
    # if 'period' in get_params:
    #     query_params["__raw__"] = {
    #         "period": 
    #             {
    #                 '$regex': get_params["period"] 
    #             }
    #         }
        
    if 'exchange' in get_params:
        query_params['exchange'] = True

    if 'title' in get_params and get_params["title"] != "":
        query_params['title__contains'] = get_params["title"]
        # query_params["__raw__"] = {
        #     "title": 
        #         {
        #             '$regex': get_params["title"] 
        #         }
        #     }

    if 'with_photo' in get_params and get_params['with_photo'] == "yes":
        query_params['images_len__gt'] = 1

    if not 'sort_order' in get_params:
        get_params["sort_order"] = "-adding_date"

    filter_obj = Filter(get_params)
    filter_obj.is_valid()
    for mystring in ['living_area', 'kitchen_area', 'total_area', 'plot_size_in_acros','floors']:
        query_lte_gte_(get_params,mystring,query_params)

    limit = datetime.now() - timedelta(days=30)
    query_params["__raw__"] = { '$or': [ {'adding_date': {'$gt': limit} }, {'expiring_date': {'$gt': datetime.now()} } ] }


    # http://rate-exchange.appspot.com/currency?from=USD&to=EUR
    # {"to": "EUR", "rate": 0.85980000000000001, "from": "USD"}
    if 'currency' in get_params and ('price_min' in get_params or 'price_max' in get_params) and (get_params['price_min'] != '' or get_params['price_max'] != ''):
        query_params['currency'] = get_params['currency']
        query_lte_gte_(get_params,'price',query_params)

        merge_ads_list = do_filtering(query_params, get_params['sort_order'])
        ads_count = merge_ads_list.count()

        if 'price_min' in get_params and get_params['price_min'] != '':
            price_min_original = get_params['price_min']
        if 'price_max' in get_params and get_params['price_max'] != '':
            price_max_original = get_params['price_max']

        currencies = ['usd','eur','byr']
        currencies.remove(get_params['currency'])
              
        for conversion in currencies:
            query_params['currency'] = conversion

            if 'price_min' in get_params and get_params['price_min'] != '':
                get_params['price_min'] = price_convert(float(price_min_original),get_params['currency'], conversion)
            if 'price_max' in get_params and get_params['price_max'] != '':
                get_params['price_max'] = price_convert(float(price_max_original),get_params['currency'], conversion)
            query_lte_gte_(get_params,'price',query_params)

            merge_ads_list = do_filtering(query_params, get_params['sort_order'])
            ads_count = ads_count + merge_ads_list.count()


    else:
        merge_ads_list = do_filtering(query_params, get_params['sort_order'])
        ads_count = merge_ads_list.count()
    
    paginator = Paginator(merge_ads_list, 12)

    try:
        page = int(get_params['page'])
    except:
        page = 1

    try:
        ads = paginator.page(page)
    except PageNotAnInteger:
        ads = paginator.page(1)
    except EmptyPage:
        ads = paginator.page(paginator.num_pages)

    if not "convert_currency_to" in get_params:
        get_params['convert_currency_to']='byr'

    if "convert_currency_to" in get_params and not get_params['convert_currency_to'].strip() == "":
        _to_curr = get_params['convert_currency_to']

        for ad in ads:
            ad.price = price_convert(float(ad.price), ad.currency, _to_curr)
            ad.currency = _to_curr

    try:
        user =  Profile.objects.get(username=get_params['user'])
        myfav = user.favorites
    except:
        myfav = False


    query_params['current_status'] = 'vip-normal'

    try:
        ads_vip_normal = Advert.objects(**query_params)
        ads_vip_normal = ads_vip_normal[randint(1,len(ads_vip_normal))-1]
    except:
        ads_vip_normal = None

    query_params['current_status'] = 'vip-super'
    try:
        ads_vip_super = Advert.objects(**query_params)
        ads_vip_super = ads_vip_super[randint(1,len(ads_vip_super))-1]
    except:
        ads_vip_super = None
    
    my_obj = {
        "ads_list": merge_ads_list,
        # "ads_list1": ads_list,
        # "ads_list2": ads_list2,
        "ads":ads, 
        "myfav": myfav,
        "ads_count": ads_count,
        "ads_vip_super": ads_vip_normal,
        "ads_vip_normal": ads_vip_super,
    }

    return my_obj

@require_http_methods(["GET"])
@ajax
def ajax_get_region_counters(request):
    get_params = request.GET.copy()
    countAdsRegion = {}
    for region in settings.MY_REGIONS:
        get_params['region'] = region
        countAdsRegion[region] = my_filtering(get_params)['ads_count']

    return countAdsRegion

@require_http_methods(["GET"])
@ajax
def ajax_get_filter(request):
    get_params = request.GET.copy()
    get_params['user'] = request.user.username
    my_obj = my_filtering(get_params)

    return render(request, "adverts.html", my_obj)

@require_http_methods(["GET"])
@ajax
def get_regions(request):

    return {
        "global_regions": Region.objects.all(),
        "regions": {
            'brest': "Брест",
            'gomel': "Гомель",
            'grodno': "Гродно",
            'minsk': "Минск",
            'mogilev': "Могилев",
            'vitebsk': "Витебск",
        }
    }

@require_http_methods(["GET"])
@ajax
def get_favorite_cards(request):
    if request.user.is_authenticated():
        try:
            user =  Profile.objects.get(username=request.user.username)
        except:
            try:
                user =  ProfileAgency.objects.get(username=request.user.username)
            except:
                user = create_user_profile(request.user)

        try:
            favorites = user.favorites
        except:
            favorites = []

    query_params = {}
    query_params[ 'id__in' ] = favorites

    if not "sort_order" in request.GET.keys():
        ads_list = Advert_Users.objects(**query_params)
        ads_list2 = Advert.objects(**query_params)
        # my_ads = list(Advert.objects(**query_params))
    else:
        ads_list = Advert_Users.objects(**query_params).order_by(request.GET['sort_order'])
        ads_list2 = Advert.objects(**query_params).order_by(request.GET['sort_order'])

    my_ads = list(ads_list) + list(ads_list2)
        # my_ads = list(Advert.objects(**query_params).order_by(request.GET['sort_order']))

    if "convert_currency_to" in request.GET.keys() and not request.GET['convert_currency_to'].strip() == "":
        _to_curr = request.GET['convert_currency_to']
        objects = Currency.objects.all()
        out = {}
        for obj in objects:
            out[obj['charcode'].lower()] = obj
        out['byr'] = {'rate': 1, "scale": 1}

        for ad in my_ads:
            ad.price = price_convert(ad.price, ad.currency, _to_curr)
            ad.currency = _to_curr

    return render(request, "adverts.html", 
        {
            "ads":my_ads,
            "myfav":favorites, 
        }
    )

@require_http_methods(["GET"])
@ajax
def get_cards(request):
    if request.user.is_authenticated():
        user =  Profile.objects.get(username=request.user.username)
        try:
            favorites = user.favorites
        except:
            favorites = []


    if not "sort_order" in request.GET.keys():
        user_ads = list(Advert_Users.objects(username=user.username))
    else:
        user_ads = list(Advert_Users.objects(username=user.username).order_by(request.GET['sort_order']))

    my_ads = []
    for ad in user_ads:
        if ad['username'] == user.username:
            my_ads.append(ad)

    if "convert_currency_to" in request.GET.keys() and not request.GET['convert_currency_to'].strip() == "":
        _to_curr = request.GET['convert_currency_to']
        objects = Currency.objects.all()
        out = {}
        for obj in objects:
            out[obj['charcode'].lower()] = obj
        out['byr'] = {'rate': 1, "scale": 1}

        for ad in my_ads:
            ad.price = price_convert(ad.price, ad.currency, _to_curr)
            ad.currency = _to_curr

    return render(request, "adverts.html", 
        {
            "ads":my_ads,
            "myfav":favorites, 
        }
    )

@require_http_methods(["GET"])
@ajax
def add_favorite_card(request):
    if request.user.is_authenticated():
        user =  Profile.objects.get(username=request.user.username)
        try:
            if user.favorites.count(request.GET["obj_id"]) == 0:
                user.update(push__favorites=request.GET["obj_id"])
            else:
                user.update(pull__favorites=request.GET["obj_id"])
        except:
            user.update(push__favorites=request.GET["obj_id"])
    return

@require_http_methods(["GET"])
@ajax
def one_card(request):
    try:
        ad = Advert.objects(id=request.GET['id']).get()
    except:
        try:
            ad = Advert_Users.objects(id=request.GET['id']).get()
        except:
            return render(request, "404.html")

    try:
        ad.update(inc__number_of_views=1)
    except:
        ad.update(push__number_of_views=1)

    query_params = {'images_len__gt': 1, 'cat_type': ad.cat_type }
    my_random = randint(0,1000)
    random_ads = Advert.objects(**query_params).order_by('-number_of_views')[my_random:my_random+3]

    try:
        ad.action_type = settings.REALT_ACTION_DICT[ ad.action_type ]
    except:
        ad.action_type = settings.REALT_CAT_TR[ ad.group.encode() ]

    ad.cat_type = settings.REALT_CAT_TR[ ad.cat_type ]

    # information fields intersection 
    intersect = list(set(dir(ad)).intersection(settings.KEYS))
    info_fields = {}
    for field in intersect:
        if ad[field] is not None: 
            info_fields[field] = settings.DICT1[field]

    ad.other_prices = {}

    if "price" in ad.__dict__.keys():
        for cur in ["usd", "byr", "eur"]:
            if cur == ad.currency:
                continue

            # ad.other_prices[cur] = price_convert(ad.price, ad.currency, cur)

    appliance_layout = {}

    for key in list(set(["city_phone", "furniture", "home_appliances", "internet"]).intersection(ad.__dict__.keys())):
        if key in info_fields.keys():
            appliance_layout[key] = info_fields[key]
            del info_fields[key]

    get_params = {}
    get_params['group'] = "living"
    get_params['cat_tab'] = "flat"
    filter_obj = Filter(get_params)
    filter_obj.is_valid()

    try:
        if request.user.username == ad.username:
            myadd = True
        else:
            myadd = False
    except:
            myadd = False

    try:
        user =  Profile.objects.get(username=request.user.username)
        if user.favorites.count(request.GET['id']) == 1:
            myfav = [request.GET['id']]
        else:
            myfav = False
    except:
        myfav = False

    return render(request, "one_card.html", 
        {
            "ad": ad,
            # "filter_obj": filter_obj,
            "info_fields": info_fields,
            "appliance_layout": appliance_layout,
            "myadd": myadd,
            "myfav": myfav,
            "random_ads": random_ads,
        }
    )

@require_http_methods(["POST"])
@ajax
@csrf_exempt
def ajax_upload_image(request):
    handle_add_images(request.FILES['file'], request.POST['ObjectId'])
    
    path = os.path.join(settings.MEDIA_ROOT, str(request.POST['ObjectId']))
    savednames_original = os.listdir(path)

    original = []
    thumbs = []
    medium = []

    for filename in savednames_original:
        if not '-small' in filename and not '-medium' in filename:
            original.append( os.path.join(settings.STATIC_URL, settings.MEDIA_URL, str(request.POST['ObjectId']))+'/{0}'.format(filename) )

    for filename in savednames_original:
        if '-medium' in filename:
            medium.append( os.path.join(settings.STATIC_URL, settings.MEDIA_URL, str(request.POST['ObjectId']))+'/{0}'.format(filename) )

    for filename in savednames_original:
        if '-small' in filename:
            thumbs.append( os.path.join(settings.STATIC_URL, settings.MEDIA_URL, str(request.POST['ObjectId']))+'/{0}'.format(filename) )

    ad = Advert_Users.objects(id=request.POST['ObjectId']).get()
    images = {}
    images['original'] = original
    images['thumbs'] = thumbs
    images['medium'] = medium
    ad.images = images
    ad.images_len = len(original)
    ad.save()
    return

@require_http_methods(["POST"])
@ajax
@csrf_exempt
def ajax_add_card(request):
    if request.method == "POST" and request.user.is_authenticated():
        request = request.POST.copy()
        add_form = AddCard(request, request.FILES)
        add_form.is_valid()
        
        if "living" in add_form.cleaned_data["group"]:
            # Form selection according to action_type, cat_tab y cat_type
            if "sale" in add_form.cleaned_data["action_type"]:
                if "flat" in add_form.cleaned_data["cat_tab"]:
                    if "room" in add_form.cleaned_data["cat_type"]:
                        add_form = AddCardRentRoom(request, request.FILES)
                    else:
                        add_form = AddCardSaleFlat(request, request.FILES)
                elif "house" in add_form.cleaned_data["cat_tab"]:
                    add_form = AddCardSaleHouse(request, request.FILES)
                elif "area" in add_form.cleaned_data["cat_tab"]:
                    add_form = AddCardSaleArea(request, request.FILES)
                
            elif "rent" in add_form.cleaned_data["action_type"]:
                if "flat" in add_form.cleaned_data["cat_tab"]:
                    if "room" in add_form.cleaned_data["cat_type"]:
                        add_form = AddCardRentRoom(request, request.FILES)
                    else:
                        add_form = AddCardRentFlat(request, request.FILES)
                elif "house" in add_form.cleaned_data["cat_tab"]:
                    add_form = AddCardRentHouse(request, request.FILES)
                elif "area" in add_form.cleaned_data["cat_tab"]:
                    add_form = AddCardRentArea(request, request.FILES)

        elif "commercial" in add_form.cleaned_data["group"]:
            add_form = AddCardCommercial(request, request.FILES)

        if add_form.is_valid():
            add_form.is_valid()

            if "sale" not in add_form.cleaned_data["action_type"]:
                del add_form.cleaned_data["exchange"]

            if "rent" in add_form.cleaned_data["action_type"]:
                if "day" in request.POST.keys() and "month" in request.POST.keys():
                    add_form.cleaned_data["period"] = "day month"
                    del add_form.cleaned_data["day"]
                    del add_form.cleaned_data["month"]
                elif "month" in request.POST.keys():
                    add_form.cleaned_data["period"] = "month"
                    del add_form.cleaned_data["month"]
                elif "day" in request.POST.keys():
                    add_form.cleaned_data["period"] = "day"
                    del add_form.cleaned_data["day"]

            if "number_of_rooms" in add_form.cleaned_data and add_form.cleaned_data["number_of_rooms"] != "":
                add_form.cleaned_data["number_of_rooms"] = int(add_form.cleaned_data["number_of_rooms"])

            del add_form.cleaned_data['agreement']

            add_form.cleaned_data['phones'] = add_form.cleaned_data['phones'].split('.')
            
            if '_edit' in request.POST:
                obj_id = request.POST["ObjectId"]
                ad = Advert_Users.objects(id=obj_id).get()
                # ad = Advert.objects(id=obj_id).get()

                for key in add_form.cleaned_data:
                    if add_form.cleaned_data[key] == False or add_form.cleaned_data[key] == '' :
                        myquery = "ad.update(unset__" + key + "=1)"
                    else:
                        myquery = "ad.update(set__" + key + "=" + "add_form.cleaned_data['" + key + "'])"
                    exec(myquery)

                for key in vars(ad).keys():
                    if key not in add_form.cleaned_data.keys():
                        myquery = "ad.update(unset__" + key + "=1)"
                        exec(myquery)

                try:
                    original = remove_images(request.POST["stored_imgs"],request.POST["ObjectId"]);
                except:
                    original = []
                # return str(ad.id)

            else:
               
                keys = add_form.cleaned_data.keys()
                for key in keys:
                    if add_form.cleaned_data[key] == False or add_form.cleaned_data[key] == "":
                        del add_form.cleaned_data[key]
                
                # Advert(**add_form.cleaned_data).save()
                Advert_Users(**add_form.cleaned_data).save()
                original = []
            
                # doc_id = Advert()['doc_id']-1 # what is a purpose of using doc_id?
                # ad = Advert.objects(**add_form.cleaned_data).get()
                ad = Advert_Users.objects(**add_form.cleaned_data).get()
                ad.expiring_date = ad.adding_date + timedelta(days=30)
                ad.username = request.user.username

            thumbs = []
            medium = []

            for path in original:
                thumbs.append( path[:len(path)-4] + '-small' + path[len(path)-4:] )

            for path in original:
                medium.append( path[:len(path)-4] + '-medium' + path[len(path)-4:] )

            images = {}
            images['original'] = original
            images['thumbs'] = thumbs
            images['medium'] = medium

            ad.images = images
            ad.images_len = len(original)

            ad.cat_tab = request['cat_tab_1']
            ad.cat_type = request['cat_type_1']
            ad.save()
            return str(ad.id)

    return add_form.errors

@require_http_methods(["POST"])
@ajax
@csrf_exempt
def ajax_register(request):
    myanswer = 'Wellcome'
    if request.method == 'POST':  # If the form has been submitted...
        Registerform = RegisterForm(request.POST)  # A form bound to the POST data
        if Registerform.is_valid():  # All validation rules pass
            # Process the data in form.cleaned_data
            username = Registerform.cleaned_data["username"]
            password = Registerform.cleaned_data["password"]
            email = Registerform.cleaned_data["email"]

            errorExists = False
            if User.objects.filter(username=username).count() > 0:
                errorExists = True
                myanswer['error'] = 'Пользователь уже существует'
            
            elif User.objects.filter(email=email).count() > 0:
                errorExists = True
                myanswer['error'] = 'E-mail уже существует'

            if not errorExists:
                Profile(**Registerform.cleaned_data).save()
                User.create_user(username,password,email)

                user = authenticate(username=username, password=password)
                login(request, user)

    return myanswer

@require_http_methods(["POST"])
@ajax
@csrf_exempt
def ajax_login(request):
    myanswer = 'Wellcome'
    if request.method == 'POST':
        Registerform = RegisterForm(request.POST)
        Registerform.is_valid()
        username = Registerform.cleaned_data['username']
        try:
            user = User.objects.get(username=username)
        except:
            try:
                user = User.objects.get(email=username)
            except:
                user = None

        if user is not None:
            password = Registerform.cleaned_data['password']
            if user.check_password(password): # Redirect to a success page.
                if user.is_active:
                    user.backend = 'mongoengine.django.auth.MongoEngineBackend'
                    login(request, user)



                    if user.is_active:
                        myanswer = '<div style="margin-right: 10px"><a href="">&nbsp;</a></div><div style="margin-right: 10px"><a href="">О проекте</a></div><div style="margin-right: 200px"><a href="/support">Поддержка</a></div><!--<div style="margin-right: 10px"><a href="/user-profile">user</a></div>--><div style="margin-right: 10px"><a href="/user-profile">Профиль</a></div><div style="margin-right: 10px"><a href="/favorite-cards">Избранные</a></div><div style="margin-right: 10px"><a href="/my-cards">Мои объявления</a></div><div><a href="/logout">Выход</a></div>'
                else:
                    myanswer = 'error: Пользователь не активен (проверьте свою электронную почту, чтобы активировать аккаунт)'
            else: # Return an 'invalid login' error message.
                myanswer = 'error: Неверный пароль'
                # return HttpResponse('disabled account')
                # Return a 'disabled account' error message
        else: 
            myanswer = "Пользователь не существует"

    return myanswer

def mobile_auth(request):
    try:
        get_params = request.GET.copy()
        Registerform = RegisterForm(get_params)
        Registerform.is_valid()
        username = Registerform.cleaned_data['username']
   
        user = User.objects.get(username=username)
        password = Registerform.cleaned_data['password']
        if user.check_password(password) and user.is_active: # Redirect to a success page.
            user.backend = 'mongoengine.django.auth.MongoEngineBackend'
            login(request, user)

            user_profile =  Profile.objects.get(username=user.username)
            profile = json.loads(user_profile.to_json())
            userdata = json.loads(user.to_json())

            my_json = {
                'profile': profile,
                'userdata': userdata
            }
            my_answer = HttpResponse(json.dumps(my_json), content_type="application/json")
        else:
            my_answer = HttpResponse(json.dumps({'error':'incorrect password'}), content_type="application/json")
    except:
        my_answer = HttpResponse(json.dumps({'error':'incorrect user'}), content_type="application/json")

    return my_answer

def mobile_filter(request):
    get_params = request.GET.copy()
    my_obj = my_filtering(get_params)

    if 'range' in get_params:
        range_min = int(get_params['range'].split(',')[0])
        range_max = int(get_params['range'].split(',')[1])
        my_answer = HttpResponse(my_obj['ads_list2'][range_min:range_max].to_json(), content_type="application/json")

    elif 'item' in get_params:
        my_answer = HttpResponse(my_obj['ads_list2'][int(get_params['item'])].to_json(), content_type="application/json")

    elif 'page' in get_params:
        user_ads = json.loads(my_obj['ads_list1'].to_json())
        parser_ads = json.loads(my_obj['ads_list2'].to_json())

        my_json = {
            'user_ads': user_ads,
            'parser_ads': parser_ads
        }

        my_answer = HttpResponse(json.dumps(my_json), content_type="application/json")

    else:
        my_answer = HttpResponse(my_obj['ads_list2'][:10000].to_json(), content_type="application/json")

    return my_answer

@require_http_methods(['GET'])
@ajax
def get_region_in_english(region_in_russian):
    return REGION_TR[region_in_russian.GET['data']]

@require_http_methods(['GET'])
@ajax
def get_region_autocomplete(request):
    try:
        req = request.GET['region'][:request.GET['region'].index('(')-1]
    except:
        req = request.GET['region']

    if u'область' in req:
        query_params = {'OBL': req.upper()}
        regions = Myregions.objects(**query_params)
        regions_list = [region['RAION'] for region in regions]
        my_answer = [] # Capital
        for el in regions_list:
            if el not in my_answer:
                my_answer.append(el)

        return my_answer

    else:
        query_params = {'NAME': req.title()}
        regions = Myregions.objects(**query_params)
        return regions[0]['RAION']

    # regions = [item['RAION'] for item in data if request.GET['region'].lower() in item['OBL'].lower()]
    

    # matching1 = [s for s in my_regions if request.GET['region'].lower() in s.lower() ]
    # region_list = []
    # for element in matching1:
    #     splited_element = element.split(',')
    #     for s in splited_element:
    #         if request.GET['region'].lower() in s.lower() and s.title() not in region_list:
    #             region_list.append(s.title())
    #             break            

    # return region_list

@require_http_methods(['GET'])
@ajax
def get_cat_type_commercial(request):
    return settings.CAT_TYPE_COMMERCIAL[request.GET['cat_tab']]

@require_http_methods(['GET'])
@ajax
def edit_user_profile(request):
    element = request.GET['element']
    action = request.GET['action']
    value = request.GET['value']

    user_profile = Profile.objects.get(username=request.user.username)
    user = User.objects.get(username=request.user.username)

    if element == 'phones':
        if action == 'add':
            user_profile.update(push__phones=value)
        elif action == 'delete':
            user_profile.update(pop__phones=value[-1:])

    elif element == 'fullname':
        user_profile.update(set__fullname=value)

    elif element == 'email':
        user_profile.update(set__email=value)
        user.update(set__email=value)

    return

@require_http_methods(['GET'])
@ajax
def ajax_get_my_cards(request):
    try:
        user =  Profile.objects.get(username=request.user.username)
    except:
        try:
            user =  ProfileAgency.objects.get(username=request.user.username)
        except:
            user = create_user_profile(request.user)

    if 'convert_currency_to' in request.GET:
        my_ads = get_my_cards(user,request.GET['convert_currency_to'] )
    else:
        my_ads = get_my_cards(user)

    try:
        favorites = user.favorites
    except:
        favorites = []
    return render(request, "adverts.html", 
        {
            'ads': my_ads,
            'myfav': favorites,
        }
    )

@require_http_methods(['GET'])
@ajax
def ajax_get_my_favorites(request):
    try:
        user =  Profile.objects.get(username=request.user.username)
    except:
        try:
            user =  ProfileAgency.objects.get(username=request.user.username)
        except:
            user = create_user_profile(request.user)

    if 'convert_currency_to' in request.GET:
        my_ads = get_my_favorites(user,request.GET['convert_currency_to'] )
    else:
        my_ads = get_my_favorites(user)

    try:
        favorites = user.favorites
    except:
        favorites = []
    return render(request, "adverts.html", 
        {
            'ads': my_ads,
            'myfav': favorites,            
        }
    )

def enable_user(request):
    obj_id = request.GET['id']
    this_user = User.objects.get(id=str(obj_id))
    this_user['is_active'] = True
    this_user.save()
    # return render(request, "email_sent.html",{'mys_message':'Thanks for activate your account, now you can login <a href="/login">here</a>'})
    # return HttpResponse(json.dumps({ this_user.username : 'enabled'}), content_type="application/json")
    return redirect('/')

def validate_email_agency(request):
    obj_id = request.GET['id']
    this_user = User.objects.get(id=str(obj_id))
    this_profile = ProfileAgency.objects.get(username=this_user.username)
    os.system('echo "' + this_profile.to_json() + 'Click in following link to ACTIVATE agency: http://domvam.by/enable_user/?id=' + str(this_user.id) + '"| mail -s "New Agency ' + this_profile.name_of_entity + '" gabriel_leske@hotmail.com')
    return render(request, "email_sent.html",{'mys_message':'Спасибо за проверить свою электронную почту, мы будем обрабатывать ваш запрос агентства зарегистрироваться и активировать свой аккаунт как можно скорее, это будет подтверждено по электронной почте.'})
    # return HttpResponse(json.dumps({ this_user.username : 'enabled'}), content_type="application/json")  

def disable_user(request):
    username = request.GET['username']
    this_user = User.objects.get(username=username)
    this_user['is_active'] = False
    this_user.save()
    return HttpResponse(json.dumps({ username : 'disabled'}), content_type="application/json") 

def make_user_admin(request):
    username = request.GET['username']
    this_user = User.objects.get(username=username)
    this_user['is_staff'] = True
    this_user['is_superuser'] = True
    this_user.save()
    return HttpResponse(json.dumps({ username : 'admin'}), content_type="application/json")

def unmake_user_admin(request):
    username = request.GET['username']
    this_user = User.objects.get(username=username)
    this_user['is_staff'] = False
    this_user['is_superuser'] = False
    this_user.save()
    return HttpResponse(json.dumps({ username : 'normal'}), content_type="application/json")


from django.core.servers.basehttp import FileWrapper
import StringIO
def yandex_txt(request,num):
    filename = 'yandex_' + num + '.txt'
    myfile = open(os.path.join(settings.STATIC_ROOT, filename))
    response = HttpResponse(FileWrapper(myfile), content_type='text/plain')
    response['Content-Disposition'] = 'attachment; filename=%s' % filename
    return response

def add_contact(request):
    this_profile = ProfileAgency.objects.get(username=request.user.username)
    return

def ef99b3aebfcd135529b9b21ae(request):
    return render(request,'ef99b3aebfcd135529b9b21ae.html')

def add_profile_image(request):
    # import ipdb; ipdb.set_trace()
    pass

